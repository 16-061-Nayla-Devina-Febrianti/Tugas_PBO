import random

class Robot:
    def __init__(self, name, hp, attack, defense, accuracy):
        self.name = name
        self.hp = hp
        self.attack = attack
        self.defense = defense
        self.accuracy = accuracy

    def attack_enemy(self, enemy):
        # Akurasi serangan
        if random.random() <= self.accuracy:
            damage = self.attack - enemy.defense
            damage = max(damage, 0)  # Pastikan damage tidak negatif
            print(f"{self.name} menyerang {enemy.name} dan memberikan {damage} damage!")
            enemy.hp -= damage
        else:
            print(f"{self.name} gagal menyerang {enemy.name}!")

    def defend(self):
        # Menambah defense untuk mengurangi damage pada ronde ini
        print(f"{self.name} bertahan dengan meningkatkan pertahanan!")

    def is_alive(self):
        return self.hp > 0

    def status(self):
        print(f"{self.name} - HP: {self.hp}, Attack: {self.attack}, Defense: {self.defense}")


class Game:
    def __init__(self, robot1, robot2):
        self.robot1 = robot1
        self.robot2 = robot2
        self.round = 1

    def print_status(self):
        print(f"Round-{self.round} ==========================================================")
        self.robot1.status()
        self.robot2.status()

    def player_action(self, robot):
        # Menampilkan pilihan aksi untuk robot
        print(f"\n{robot.name}, pilih aksi:")
        print("1. Attack     2. Defense     3. Giveup")
        choice = input(f"{robot.name}, pilih aksi: ")

        if choice == "1":
            return "attack"
        elif choice == "2":
            return "defend"
        elif choice == "3":
            return "giveup"
        else:
            print("Pilihan tidak valid, pilih 1, 2, atau 3.")
            return self.player_action(robot)

    def play_round(self):
        # Menampilkan status awal
        self.print_status()

        # Pilihan aksi robot 1
        action1 = self.player_action(self.robot1)
        if action1 == "attack":
            self.robot1.attack_enemy(self.robot2)
        elif action1 == "defend":
            self.robot1.defend()
        elif action1 == "giveup":
            print(f"{self.robot1.name} menyerah!")
            return False  # Robot 1 kalah

        # Jika robot 2 masih hidup, lakukan aksi robot 2
        if self.robot2.is_alive():
            action2 = self.player_action(self.robot2)
            if action2 == "attack":
                self.robot2.attack_enemy(self.robot1)
            elif action2 == "defend":
                self.robot2.defend()
            elif action2 == "giveup":
                print(f"{self.robot2.name} menyerah!")
                return False  # Robot 2 kalah

        return True  # Lanjutkan ke ronde berikutnya

    def start(self):
        while self.robot1.is_alive() and self.robot2.is_alive():
            if not self.play_round():
                break
            self.round += 1

        # Menentukan pemenang
        if self.robot1.is_alive():
            print(f"\n{self.robot1.name} menang!")
        else:
            print(f"\n{self.robot2.name} menang!")


def main():
    # Membuat dua robot dengan atribut berbeda
    robot1 = Robot(name="Atreus", hp=500, attack=10, defense=5, accuracy=0.8)
    robot2 = Robot(name="Daedalus", hp=750, attack=8, defense=7, accuracy=0.75)

    # Memulai permainan
    game = Game(robot1, robot2)
    game.start()

if __name__ == "__main__":
    main()
